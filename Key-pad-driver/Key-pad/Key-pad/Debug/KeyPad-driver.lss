
KeyPad-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000008a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000040b  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000140  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000105  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "keypad.h"
#include "LEDs.h"

int main(void)
{
	  vKeypadInit();
  92:	0e 94 51 00 	call	0xa2	; 0xa2 <vKeypadInit>
   unsigned char pressed ; 
    while(1)
    {
        if (ucKeypad_Scan() == 'S'){
  96:	0e 94 62 00 	call	0xc4	; 0xc4 <ucKeypad_Scan>
  9a:	83 35       	cpi	r24, 0x53	; 83
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x4>
		LED0_DATA == 0X03; }
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	fa cf       	rjmp	.-12     	; 0x96 <main+0x4>

000000a2 <vKeypadInit>:
void vKeypadInit(void)
   {
	//set input 0 
	// set output 0 
	//set rows is output.
	ROW0_DIR |= (1U<<ROW0);   
  a2:	a0 9a       	sbi	0x14, 0	; 20
	ROW1_DIR |= (1U<<ROW1);
  a4:	a1 9a       	sbi	0x14, 1	; 20
	ROW2_DIR |= (1U<<ROW2);
  a6:	a2 9a       	sbi	0x14, 2	; 20
	ROW3_DIR |= (1U<<ROW3);  
  a8:	a3 9a       	sbi	0x14, 3	; 20
	// set lines is inputs.
	LINE0_DIR &=~ (1U<<LINE0);
  aa:	a4 98       	cbi	0x14, 4	; 20
	LINE1_DIR &=~ (1U<<LINE1);
  ac:	a5 98       	cbi	0x14, 5	; 20
	LINE2_DIR &=~ (1U<<LINE2);
  ae:	a6 98       	cbi	0x14, 6	; 20
	LINE3_DIR &=~ (1U<<LINE3);
  b0:	a7 98       	cbi	0x14, 7	; 20
	// LINES IS PULL-UP.
	LINE0_PULLUP |= (1U<<LINE0);
  b2:	9c 9a       	sbi	0x13, 4	; 19
	LINE1_PULLUP |= (1U<<LINE1);
  b4:	9d 9a       	sbi	0x13, 5	; 19
	LINE2_PULLUP |= (1U<<LINE2);
  b6:	9e 9a       	sbi	0x13, 6	; 19
	LINE3_PULLUP |= (1U<<LINE3);
  b8:	9f 9a       	sbi	0x13, 7	; 19
	//set rows state(1).
	ROW0_DATAOUT |= (NO_OUTPUT_STATE<<ROW0);
  ba:	a8 9a       	sbi	0x15, 0	; 21
	ROW1_DATAOUT |= (NO_OUTPUT_STATE<<ROW1);
  bc:	a9 9a       	sbi	0x15, 1	; 21
	ROW2_DATAOUT |= (NO_OUTPUT_STATE<<ROW2);
  be:	aa 9a       	sbi	0x15, 2	; 21
	ROW3_DATAOUT |= (NO_OUTPUT_STATE<<ROW3);
  c0:	ab 9a       	sbi	0x15, 3	; 21
}
  c2:	08 95       	ret

000000c4 <ucKeypad_Scan>:
	uint8_t line = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;  
	// loop rows 
	  for(row =0; row<4;row++){
		//set the numbered rows to the output states (1)
			ROW0_DATAOUT |= (NO_OUTPUT_STATE<<ROW0);
  c4:	a8 9a       	sbi	0x15, 0	; 21
			ROW1_DATAOUT |= (NO_OUTPUT_STATE<<ROW1);
  c6:	a9 9a       	sbi	0x15, 1	; 21
			ROW2_DATAOUT |= (NO_OUTPUT_STATE<<ROW2);
  c8:	aa 9a       	sbi	0x15, 2	; 21
			ROW3_DATAOUT |= (NO_OUTPUT_STATE<<ROW3);
  ca:	ab 9a       	sbi	0x15, 3	; 21
	 //set the numbered rows to the output states (0)
	 switch(row){
	 case 0:ROW0_DATAOUT &=~(OUTPUT_STATE <<ROW0); break;
  cc:	a8 98       	cbi	0x15, 0	; 21
	 case 2:ROW2_DATAOUT &=~(OUTPUT_STATE <<ROW2); break;
	 case 3:ROW3_DATAOUT &=~(OUTPUT_STATE <<ROW3); break;
	 default: break;
	 }	 
	 //check the inputs
	 if ( LINE0_DATAIN&(1U<<LINE0) == INPUT_STATE) {line =0;}
  ce:	85 b3       	in	r24, 0x15	; 21
  else if( LINE1_DATAIN&(1U<<LINE1) == INPUT_STATE) {line =1;}
  d0:	85 b3       	in	r24, 0x15	; 21
  else if( LINE2_DATAIN&(1U<<LINE2) == INPUT_STATE) {line =2;}
  d2:	85 b3       	in	r24, 0x15	; 21
  else if( LINE3_DATAIN&(1U<<LINE3) == INPUT_STATE) {line =3;}
  d4:	85 b3       	in	r24, 0x15	; 21
	  break;
	}	
     return result;
	}
		
 }
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	08 95       	ret

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
